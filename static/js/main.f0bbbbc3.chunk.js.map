{"version":3,"sources":["images/like.svg","screens/Start/Start.jsx","screens/Game/Game.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Start","setGameStart","gameOver","score","className","classNames","src","like","alt","toLocaleString","onClick","LETTERS","STEPS","Game","setGameOver","setScore","useState","currentStep","setCurrentStep","correctAnswer","setCorrectAnswer","wrongAnswer","setWrongAnswer","reverseSteps","reverse","currentQuestion","questions","useCallback","finishStep","gameScore","useEffect","setTimeout","state","question","answers","map","answer","index","correct","checkAnswer","step","App","gameStart","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f0bbbbc3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/like.ae778be2.svg\";","import React from 'react';\nimport './Start.scss';\nimport classNames from 'classnames';\nimport like from '../../images/like.svg';\n\nexport const Start = ({ setGameStart, gameOver, score }) => {\n  const startGame = () => {\n    setGameStart(true);\n  }\n\n  return (\n    <div className={classNames( \n        'game-start', \n        { 'game-start_bg': !gameOver }\n      )}\n    >\n      <div className=\"game-start__wrapper\">\n        <img className=\"game-start__logo\" src={like} alt=\"like\"/>\n\n        <div className=\"game-start__content\">\n          {!gameOver ? (\n            <h1 className=\"game-start__title\">Who wants to be aÂ millionaire?</h1>\n          ) : (\n            <>\n              <h3 className=\"game-start__score-title\">Total score:</h3>\n              <h2 className=\"game-start__title\">{`$${score.toLocaleString()} earned`}</h2>\n            </>\n          )}\n\n          <button\n            onClick={startGame}\n            className=\"game-start__button\"\n          >\n            Start\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React, { useState, useEffect, useCallback } from 'react';\nimport './Game.scss';\nimport classNames from 'classnames';\nimport questions from '../../data/questions.json';\n\nconst LETTERS = ['A', 'B', 'C', 'D'];\nconst STEPS = [500, 1000, 2000, 4000, 8000, 16000, 32000, 64000, 125000, 250000, 500000, 1000000];\n\nexport const Game = ({ setGameStart, setGameOver, setScore }) => {\n  const [currentStep, setCurrentStep] = useState(0);\n  const [correctAnswer, setCorrectAnswer] = useState(false);\n  const [wrongAnswer, setWrongAnswer] = useState(false);\n  const reverseSteps = [...STEPS].reverse();\n  const currentQuestion = questions[currentStep];\n\n  const checkAnswer = (answer) => {\n    if (answer !== currentQuestion.correct) {\n      setWrongAnswer(answer);\n    }\n      \n    if (answer === currentQuestion.correct && currentStep === 10) {\n      setCorrectAnswer(answer);\n    }\n\n    if (answer === currentQuestion.correct) {\n      setCorrectAnswer(answer);\n    }\n  }\n\n  const gameOver = useCallback((finishStep) => {\n    gameScore(finishStep);\n    setGameStart(false);\n    setGameOver(true);\n  }, [])\n\n  useEffect(() => {\n    if (correctAnswer) {\n      setTimeout(() => {\n        setCurrentStep(state => state + 1);\n        setCorrectAnswer(false);\n      }, 1000);\n    }\n  }, [correctAnswer]);\n    \n  useEffect(() => {\n    if (wrongAnswer) {\n      setTimeout(() => {\n        gameOver(currentStep);\n        setWrongAnswer(false);\n      }, 1000);\n    }\n  }, [wrongAnswer, currentStep, gameOver]);\n\n  const gameScore = (finishStep) => {\n    if (finishStep === 0) {\n      setScore(0);\n    } else {\n      setScore(STEPS[finishStep - 1]);\n    }\n  }\n\n  return (\n    <div className=\"game-field\">\n      <div className=\"game-field__wrapper\">\n        <div className=\"game-field__question\">\n          <h2 className=\"game-field__title\">{currentQuestion.question}</h2>\n\n          <div className=\"game-field__answers\">\n            {currentQuestion.answers.map((answer, index) => (\n              <button\n                className={classNames(\n                  'game-field__answer',\n                  'answer-button',\n                  {\n                    'answer-button_correct': answer === correctAnswer,\n                    'answer-button_wrong': answer === wrongAnswer\n                  }\n                )}\n                key={answer}\n                onClick={() => checkAnswer(answer)}\n              >\n                <span className=\"answer-button__letter\">{LETTERS[index]}</span>\n                {answer}\n              </button>\n            ))}\n          </div>\n        </div>\n\n        <div className=\"game-field__steps\">\n          {reverseSteps.map(step => (\n            <div\n              className={classNames(\n                'game-field__step',\n                {\n                  'game-field__step_inactive': step > STEPS[currentStep],\n                  'game-field__step_current': step === STEPS[currentStep],\n                  'game-field__step_finished': step < STEPS[currentStep],\n                }\n              )}\n              key={step}\n            >\n              {`$${step.toLocaleString()}`}\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React, { useState } from 'react';\nimport './App.css';\nimport { Start } from './screens/Start';\nimport { Game } from './screens/Game';\n\nconst App = () => {\n  const [gameStart, setGameStart] = useState(false);\n  const [gameOver, setGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n\n  return (\n    <div className=\"game\">\n      { !gameStart ? (\n        <Start\n          setGameStart={setGameStart}\n          gameOver={gameOver}\n          score={score}\n        />\n      ) : (\n        <Game\n          setGameStart={setGameStart}\n          setGameOver={setGameOver}\n          setScore={setScore}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}